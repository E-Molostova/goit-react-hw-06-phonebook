{"version":3,"sources":["Components/ContactList/ContactList.module.css","Components/Filter/Filte.module.css","redux/contacts/contacts-action.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","Components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","contact","payload","id","uuidv4","deleteContact","filterContact","ContactForm","useState","name","setName","number","setNumber","contacts","useSelector","state","phonebook","dispatch","useDispatch","handleChange","e","target","value","className","style","formContact","onSubmit","preventDefault","some","toLowerCase","alert","inputLabel","type","onChange","pattern","title","required","contactInput","buttonInput","ContactList","filter","filteredContacts","includes","getFilteredContacts","contactsList","map","contactsItem","contactsDeleteBtn","onClick","Filter","divFilter","inputFilter","App","contactsReducer","createReducer","filterReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","phonebookPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","persistStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e5be8797.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"ContactList_contactsList__3ub9t\",\"contactsItem\":\"ContactList_contactsItem__2yLsi\",\"contactsDeleteBtn\":\"ContactList_contactsDeleteBtn__2HTrw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputFilter\":\"Filte_inputFilter__13ENW\",\"inputLabel\":\"Filte_inputLabel__2piuN\",\"divFilter\":\"Filte_divFilter__2QowR\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const addContact = createAction('contacts/addContact', contact => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    ...contact,\r\n  },\r\n}));\r\nexport const deleteContact = createAction('contacts/deleteContact');\r\nexport const filterContact = createAction('contacts/filterContact');\r\n\r\n// Redux Vanilla\r\n// import types from './contacts-types';\r\n// import { v4 as uuidv4 } from 'uuid';\r\n// export const addContact = contact => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     ...contact,\r\n//   },\r\n// });\r\n\r\n// export const deleteContact = todoId => ({\r\n//   type: types.DELETE,\r\n//   payload: todoId,\r\n// });\r\n\r\n// export const filterContact = value => ({\r\n//   type: types.FILTER,\r\n//   payload: value,\r\n// });\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addContact } from '../../redux/contacts/contacts-action';\r\nimport style from './ContactForm.module.css';\r\n\r\nconst ContactForm = () => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const { contacts } = useSelector(state => state.phonebook);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  const isContactExist = () => {\r\n    contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase());\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (isContactExist(name)) {\r\n      alert(`${name} is already in contacts!`);\r\n    } else {\r\n      dispatch(addContact({ name, number }));\r\n      reset();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className={style.formContact} onSubmit={handleSubmit}>\r\n      <label className={style.inputLabel}>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          onChange={handleChange}\r\n          value={name}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          className={style.contactInput}\r\n        />\r\n      </label>\r\n      <label className={style.inputLabel}>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          onChange={handleChange}\r\n          value={number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          className={style.contactInput}\r\n        />\r\n      </label>\r\n      <button className={style.buttonInput} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\nexport default ContactForm;\r\n\r\n// const mapStateToProps = state => ({\r\n//   contacts: state.phonebook.contacts,\r\n// });\r\n// const mapDispatchToProps = { addContact };\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\n// import PropTypes from 'prop-types';\r\n// ContactForm.propTypes = {\r\n//   addNewContact: PropTypes.func.isRequired,\r\n//   isContactExist: PropTypes.func.isRequired,\r\n// };\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { deleteContact } from '../../redux/contacts/contacts-action';\r\nimport style from './ContactList.module.css';\r\n\r\nconst ContactList = () => {\r\n  const { contacts, filter } = useSelector(state => state.phonebook);\r\n  const dispatch = useDispatch();\r\n\r\n  const getFilteredContacts = (contacts, filter) =>\r\n    contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\r\n  const filteredContacts = getFilteredContacts(contacts, filter);\r\n\r\n  return (\r\n    <ul className={style.contactsList}>\r\n      {filteredContacts.map(contact => (\r\n        <li className={style.contactsItem} key={contact.id}>\r\n          <p>{contact.name + ': ' + contact.number}</p>\r\n          <button\r\n            className={style.contactsDeleteBtn}\r\n            id={contact.id}\r\n            type=\"button\"\r\n            onClick={e => dispatch(deleteContact(e.target.id))}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n\r\n// const mapStateToProps = state => {\r\n//   const { filter, contacts } = state.phonebook;\r\n//   const filteredContacts = getFiltered(contacts, filter);\r\n//   return {\r\n//     contacts: filteredContacts,\r\n//   };\r\n// };\r\n// const mapDispatchToProps = { deleteContact };\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { filterContact } from '../../redux/contacts/contacts-action';\r\nimport style from './Filte.module.css';\r\n\r\nconst Filter = () => {\r\n  const { filter } = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className={style.divFilter}>\r\n      <label className={style.inputLabel}>\r\n        Find contacts by name\r\n        <input\r\n          className={style.inputFilter}\r\n          type=\"text\"\r\n          value={filter}\r\n          name=\"search\"\r\n          onChange={e => dispatch(filterContact(e.target.value))}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\n// const mapStateToProps = state => ({\r\n//   filter: state.phonebook.filter,\r\n// });\r\n// const mapDispatchToProps = { filterContact };\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import ContactForm from './Components/ContactForm/ContactForm';\nimport ContactList from './Components/ContactList/ContactList';\nimport Filter from './Components/Filter/Filter';\n\nconst App = () => {\n  // const [contacts, setContacts] = useState(JSON.parse(localStorage.getItem('contacts')) || []);\n  // const [filter, setFilter] = useState('');\n\n  // useEffect(() => {\n  //   localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts </h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default App;\n","import { combineReducers, createReducer } from '@reduxjs/toolkit';\r\nimport { addContact, deleteContact, filterContact } from './contacts-action';\r\nconst contactsReducer = createReducer([], {\r\n  [addContact]: (state, { payload }) => [...state, payload],\r\n  [deleteContact]: (state, { payload }) =>\r\n    state.filter(contact => {\r\n      return contact.id !== payload;\r\n    }),\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [filterContact]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts: contactsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\n// Redux Vanilla\r\n// import { combineReducers } from 'redux';\r\n// import types from './contacts-types';\r\n// const contacts = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default combineReducers({\r\n//   contacts,\r\n//   filter,\r\n// });\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n    devTools: process.env.NODE_ENV === 'development',\r\n  }),\r\n];\r\n\r\nconst phonebookPersistConfig = {\r\n  key: 'phonebook',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    phonebook: persistReducer(phonebookPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n\r\n// Redux Vanilla\r\n// import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import contactsReducer from './contacts/contacts-reducer';\r\n\r\n// const rootReducer = combineReducers({\r\n//   phonebook: contactsReducer,\r\n// });\r\n\r\n// export const store = createStore(rootReducer, composeWithDevTools());\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactInput\":\"ContactForm_contactInput__3iEkg\",\"buttonInput\":\"ContactForm_buttonInput__1_UUC\",\"formContact\":\"ContactForm_formContact__14ImO\",\"inputLabel\":\"ContactForm_inputLabel__o7rSg\"};"],"sourceRoot":""}